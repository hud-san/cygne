import sys
import socket
import json
import time
import random
from datetime import datetime

def scan_port(target, port, timeout=1.0):
    """Scan a single port"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(timeout)
    
    try:
        result = sock.connect_ex((target, port))
        sock.close()
        return result == 0
    except:
        sock.close()
        return False

def parse_port_ranges(port_range_str):
    """
    Parse a port range string like "1-100,200-300,443" into a list of ports
    """
    ports = []
    ranges = port_range_str.split(',')
    
    for r in ranges:
        if '-' in r:
            start, end = map(int, r.split('-'))
            ports.extend(range(start, end + 1))
        else:
            ports.append(int(r))
    
    return ports

def scan_ports(target, ports, output_file):
    """Scan specified ports and save results to file"""
    start_time = datetime.now()
    
    # Get instance's outbound IP for reporting
    my_ip = get_my_ip()
    
    print(f"Starting scan from IP {my_ip}")
    print(f"Target: {target}, Ports: {len(ports)} ports to scan")
    
    results = {
        "scanner_ip": my_ip,
        "target": target,
        "scan_start": start_time.isoformat(),
        "open_ports": []
    }
    
    # Scan each port with ballet-like timing
    for port in ports:
        # Add graceful, random timing
        time.sleep(random.uniform(0.05, 0.2))
        
        if scan_port(target, port):
            print(f"Port {port} is open")
            results["open_ports"].append(port)
    
    # Add scan completion time
    results["scan_end"] = datetime.now().isoformat()
    results["open_port_count"] = len(results["open_ports"])
    
    # Save results to file
    with open(output_file, 'w') as f:
        json.dump(results, f, indent=2)
    
    print(f"Scan complete. Found {len(results['open_ports'])} open ports.")
    print(f"Results saved to {output_file}")

def get_my_ip():
    """Get the instance's outbound IP address"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        return "unknown"

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python scan.py <target> <port_ranges> [output_file]")
        print("  port_ranges: Format is '1-100,200-300,443'")
        sys.exit(1)
    
    target = sys.argv[1]
    port_ranges = sys.argv[2]
    output_file = sys.argv[3] if len(sys.argv) > 3 else "scan_results.json"
    
    # Parse the port ranges
    ports_to_scan = parse_port_ranges(port_ranges)
    
    if not ports_to_scan:
        print("Error: No valid ports specified")
        sys.exit(1)
        
    print(f"Preparing to scan {len(ports_to_scan)} ports")
    scan_ports(target, ports_to_scan, output_file)